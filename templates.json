{
  "mean_of_feature_by_cond_side_joint": "\nMATCH (s:Subject)-[:HAS_TRIAL]->(t:Trial)-[:HAS_FEATURE]->(xv:FeatureValue)-[:OF_FEATURE]->(xf:Feature)\nWHERE s.pid STARTS WITH '{cond}:'\n  AND xf.stat = '{stat}'\n  AND xf.code =~ '{code_regex}'\nRETURN s.pid AS subject_pid, avg(xv.value) AS mean_value\nORDER BY subject_pid;\n",

  "compare_asd_td_feature": "\nCALL {\n  MATCH (s:Subject)-[:HAS_TRIAL]->(:Trial)-[:HAS_FEATURE]->(xv:FeatureValue)-[:OF_FEATURE]->(xf:Feature)\n  WHERE s.pid STARTS WITH 'ASD:' AND xf.stat = '{stat}' AND xf.code =~ '{code_regex}'\n  RETURN 'ASD' AS cond, avg(xv.value) AS avg_val\n}\nCALL {\n  MATCH (s:Subject)-[:HAS_TRIAL]->(:Trial)-[:HAS_FEATURE]->(xv:FeatureValue)-[:OF_FEATURE]->(xf:Feature)\n  WHERE s.pid STARTS WITH 'TD:' AND xf.stat = '{stat}' AND xf.code =~ '{code_regex}'\n  RETURN 'TD' AS cond, avg(xv.value) AS avg_val\n}\nRETURN cond, avg_val\nORDER BY cond;\n",

  "top_correlated_pairs": "\nMATCH (a:Feature)-[r:CORRELATED_WITH]->(b:Feature)\nRETURN a.code AS A, b.code AS B, r.r AS r, r.n AS n\nORDER BY abs(r) DESC, n DESC\nLIMIT 20;\n",

  "list_trials_files_complete": "\nMATCH (t:Trial)\nOPTIONAL MATCH (t)-[:HAS_FILE]->(f:File)\nWITH t, collect(DISTINCT f.kind) AS kinds\nOPTIONAL MATCH (t)-[:HAS_FEATURE]->(fv:FeatureValue)-[:OF_FEATURE]->(feat:Feature)\nWITH t, kinds, count(DISTINCT fv) AS nvals, count(DISTINCT feat) AS nfeats\nRETURN t.uid AS trial_uid,\n       size(kinds) AS kinds_n,\n       (CASE WHEN size(kinds)=4 THEN true ELSE false END) AS has_all_4_kinds,\n       (CASE WHEN nvals=463 AND nfeats=463 THEN true ELSE false END) AS is_complete;\n",

  "count_nodes_labels": "\nCALL {\n  MATCH (n) RETURN count(n) AS nodes\n}\nCALL {\n  MATCH ()-[r]->() RETURN count(r) AS rels\n}\nRETURN nodes, rels;\n"
}